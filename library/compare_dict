#!/usr/bin/env python

# Copyright 2015 Michael Kashin  <mmkashin@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: compare_dict
short_description: verify that ntc template test case passes
description:
    - This module verifies that the result received from TextFSM
      for a particular template matches the expected output from
      a test scenario. It does so by comparing two lists of
      dictionaries going through elements of one and checking if
      the element 'is in' the second list.
author: Michael Kashin
requirements:
    - none
options:
    result:
        description:
            - a list of dictionaries received from ntc_show_command module
        required: true
        default: null
        choices: []
        aliases: []
    sample:
        description:
            - a parsed sample from a test scenario
        required: true
        default: null
        choices: []
        aliases: []

'''
EXAMPLES = '''

# verify that parsed result is the same as expected
- compare_dict:
    result: "{{ item.item.response }}"
    sample: "{{ item.ansible_facts.parsed_sample }}"

'''

def compare(dict_one, dict_two):
    msgs = []
    rc = 0

    for el in dict_one:
        if el not in dict_two:
            msgs.append("Key '%s' is not found in sample input" % (el))
            rc += 1
        else:
            # we know the elements exist, so no need for .get()
            if dict_one[el] != dict_two[el]:
                msgs.append("Value for key '%s' is not same as sample input\nResult was: '%s'\nSample was: '%s'\n" % (el, dict_one[el], dict_two[el]))
                rc += 1

    # there is likely a more elagant way to combine this inverse-test with the above, but quick and dirty, compare it backwards:
    for el in dict_two:
        if el not in dict_one:
            msgs.append("Key '%s' is not found in result output" % (el))
            rc += 1 

    msg = " | ".join(msgs)
    return rc,msg

def main():

    module = AnsibleModule(
        argument_spec=dict(
            result=dict(required=True, type='list'),
            sample=dict(required=True, type='list'),
        ),
        supports_check_mode=False
    )

    result_list = module.params['result']
    sample_list = module.params['sample']

    # Ansible gives us a list of dicts to compare for each record in parsed,
    # raw, so we need to iterate over them and summarize the results...

    rc = 0
    msgs = []

    if len(result_list) != len(sample_list): 
        msgs.append("Sample and Actual result sets differ in length")
        rc += 1

    for i, (result_dict, sample_dict) in enumerate(zip(result_list, sample_list)):
        lrc,lmsg = compare(result_dict, sample_dict)
        rc += lrc

        # Insert a description of the group number into the msg
        if lrc:
            msgs.append("Test Group[%d]: %s" % (i+1, lmsg))

    if rc != 0:
        module.fail_json(msg="Differences were detected in the raw vs parsed", stdout="\n".join(msgs))
    else:
        module.exit_json(changed=False)

from ansible.module_utils.basic import *
main()

